<oml:flow xmlns:oml="http://openml.org/openml">
	<oml:name>sklearn.pipeline.Pipeline(columntransformer=sklearn.compose._column_transformer.ColumnTransformer(numeric=sklearn.pipeline.Pipeline(simpleimputer=sklearn.impute._base.SimpleImputer,standardscaler=sklearn.preprocessing._data.StandardScaler),nominal=sklearn.pipeline.Pipeline(onehotencoder=sklearn.preprocessing._encoders.OneHotEncoder)),decisiontreeregressor=sklearn.tree._classes.DecisionTreeRegressor)</oml:name>
	<oml:custom_name>sklearn.Pipeline(ColumnTransformer,DecisionTreeRegressor)</oml:custom_name>
	<oml:class_name>sklearn.pipeline.Pipeline</oml:class_name>
	<oml:external_version>openml==0.12.2,sklearn==1.2.0</oml:external_version>
	<oml:description>Pipeline of transforms with a final estimator.

Sequentially apply a list of transforms and a final estimator.
Intermediate steps of the pipeline must be 'transforms', that is, they
must implement `fit` and `transform` methods.
The final estimator only needs to implement `fit`.
The transformers in the pipeline can be cached using ``memory`` argument.

The purpose of the pipeline is to assemble several steps that can be
cross-validated together while setting different parameters. For this, it
enables setting parameters of the various steps using their names and the
parameter name separated by a `'__'`, as in the example below. A step's
estimator may be replaced entirely by setting the parameter with its name
to another estimator, or a transformer removed by setting it to
`'passthrough'` or `None`.</oml:description>
	<oml:language>English</oml:language>
	<oml:dependencies>sklearn==1.2.0
numpy&gt;=1.17.3
scipy&gt;=1.3.2
joblib&gt;=1.1.1
threadpoolctl&gt;=2.0.0</oml:dependencies>
	<oml:parameter>
		<oml:name>memory</oml:name>
		<oml:data_type>str or object with the joblib</oml:data_type>
		<oml:default_value>null</oml:default_value>
		<oml:description>Used to cache the fitted transformers of the pipeline. By default,
    no caching is performed. If a string is given, it is the path to
    the caching directory. Enabling caching triggers a clone of
    the transformers before fitting. Therefore, the transformer
    instance given to the pipeline cannot be inspected
    directly. Use the attribute ``named_steps`` or ``steps`` to
    inspect estimators within the pipeline. Caching the
    transformers is advantageous when fitting is time consuming</oml:description>
	</oml:parameter>
	<oml:parameter>
		<oml:name>steps</oml:name>
		<oml:data_type>list of tuple</oml:data_type>
		<oml:default_value>[{"oml-python:serialized_object": "component_reference", "value": {"key": "columntransformer", "step_name": "columntransformer"}}, {"oml-python:serialized_object": "component_reference", "value": {"key": "decisiontreeregressor", "step_name": "decisiontreeregressor"}}]</oml:default_value>
		<oml:description>List of (name, transform) tuples (implementing `fit`/`transform`) that
    are chained in sequential order. The last transform must be an
    estimator</oml:description>
	</oml:parameter>
	<oml:parameter>
		<oml:name>verbose</oml:name>
		<oml:data_type>bool</oml:data_type>
		<oml:default_value>false</oml:default_value>
		<oml:description>If True, the time elapsed while fitting each step will be printed as it
    is completed.</oml:description>
	</oml:parameter>
	<oml:component>
		<oml:identifier>columntransformer</oml:identifier>
		<oml:flow xmlns:oml="http://openml.org/openml">
			<oml:name>sklearn.compose._column_transformer.ColumnTransformer(numeric=sklearn.pipeline.Pipeline(simpleimputer=sklearn.impute._base.SimpleImputer,standardscaler=sklearn.preprocessing._data.StandardScaler),nominal=sklearn.pipeline.Pipeline(onehotencoder=sklearn.preprocessing._encoders.OneHotEncoder))</oml:name>
			<oml:custom_name>sklearn.ColumnTransformer</oml:custom_name>
			<oml:class_name>sklearn.compose._column_transformer.ColumnTransformer</oml:class_name>
			<oml:external_version>openml==0.12.2,sklearn==1.2.0</oml:external_version>
			<oml:description>Applies transformers to columns of an array or pandas DataFrame.

This estimator allows different columns or column subsets of the input
to be transformed separately and the features generated by each transformer
will be concatenated to form a single feature space.
This is useful for heterogeneous or columnar data, to combine several
feature extraction mechanisms or transformations into a single transformer.</oml:description>
			<oml:language>English</oml:language>
			<oml:dependencies>sklearn==1.2.0
numpy&gt;=1.17.3
scipy&gt;=1.3.2
joblib&gt;=1.1.1
threadpoolctl&gt;=2.0.0</oml:dependencies>
			<oml:parameter>
				<oml:name>n_jobs</oml:name>
				<oml:data_type>int</oml:data_type>
				<oml:default_value>null</oml:default_value>
				<oml:description>Number of jobs to run in parallel
    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context
    ``-1`` means using all processors. See :term:`Glossary &lt;n_jobs&gt;`
    for more details</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>remainder</oml:name>
				<oml:default_value>"drop"</oml:default_value>
			</oml:parameter>
			<oml:parameter>
				<oml:name>sparse_threshold</oml:name>
				<oml:data_type>float</oml:data_type>
				<oml:default_value>0.3</oml:default_value>
				<oml:description>If the output of the different transformers contains sparse matrices,
    these will be stacked as a sparse matrix if the overall density is
    lower than this value. Use ``sparse_threshold=0`` to always return
    dense.  When the transformed output consists of all dense data, the
    stacked result will be dense, and this keyword will be ignored</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>transformer_weights</oml:name>
				<oml:data_type>dict</oml:data_type>
				<oml:default_value>null</oml:default_value>
				<oml:description>Multiplicative weights for features per transformer. The output of the
    transformer is multiplied by these weights. Keys are transformer names,
    values the weights</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>transformers</oml:name>
				<oml:data_type>list of tuples</oml:data_type>
				<oml:default_value>[{"oml-python:serialized_object": "component_reference", "value": {"key": "numeric", "step_name": "numeric", "argument_1": [0, 1, 2, 3, 4]}}, {"oml-python:serialized_object": "component_reference", "value": {"key": "nominal", "step_name": "nominal", "argument_1": []}}]</oml:default_value>
				<oml:description>List of (name, transformer, columns) tuples specifying the
    transformer objects to be applied to subsets of the data</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>verbose</oml:name>
				<oml:data_type>bool</oml:data_type>
				<oml:default_value>false</oml:default_value>
				<oml:description>If True, the time elapsed while fitting each transformer will be
    printed as it is completed</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>verbose_feature_names_out</oml:name>
				<oml:data_type>bool</oml:data_type>
				<oml:default_value>true</oml:default_value>
				<oml:description>If True, :meth:`get_feature_names_out` will prefix all feature names
    with the name of the transformer that generated that feature
    If False, :meth:`get_feature_names_out` will not prefix any feature
    names and will error if feature names are not unique

    .. versionadded:: 1.0</oml:description>
			</oml:parameter>
			<oml:component>
				<oml:identifier>numeric</oml:identifier>
				<oml:flow xmlns:oml="http://openml.org/openml">
					<oml:name>sklearn.pipeline.Pipeline(simpleimputer=sklearn.impute._base.SimpleImputer,standardscaler=sklearn.preprocessing._data.StandardScaler)</oml:name>
					<oml:custom_name>sklearn.Pipeline(SimpleImputer,StandardScaler)</oml:custom_name>
					<oml:class_name>sklearn.pipeline.Pipeline</oml:class_name>
					<oml:external_version>openml==0.12.2,sklearn==1.2.0</oml:external_version>
					<oml:description>Pipeline of transforms with a final estimator.

Sequentially apply a list of transforms and a final estimator.
Intermediate steps of the pipeline must be 'transforms', that is, they
must implement `fit` and `transform` methods.
The final estimator only needs to implement `fit`.
The transformers in the pipeline can be cached using ``memory`` argument.

The purpose of the pipeline is to assemble several steps that can be
cross-validated together while setting different parameters. For this, it
enables setting parameters of the various steps using their names and the
parameter name separated by a `'__'`, as in the example below. A step's
estimator may be replaced entirely by setting the parameter with its name
to another estimator, or a transformer removed by setting it to
`'passthrough'` or `None`.</oml:description>
					<oml:language>English</oml:language>
					<oml:dependencies>sklearn==1.2.0
numpy&gt;=1.17.3
scipy&gt;=1.3.2
joblib&gt;=1.1.1
threadpoolctl&gt;=2.0.0</oml:dependencies>
					<oml:parameter>
						<oml:name>memory</oml:name>
						<oml:data_type>str or object with the joblib</oml:data_type>
						<oml:default_value>null</oml:default_value>
						<oml:description>Used to cache the fitted transformers of the pipeline. By default,
    no caching is performed. If a string is given, it is the path to
    the caching directory. Enabling caching triggers a clone of
    the transformers before fitting. Therefore, the transformer
    instance given to the pipeline cannot be inspected
    directly. Use the attribute ``named_steps`` or ``steps`` to
    inspect estimators within the pipeline. Caching the
    transformers is advantageous when fitting is time consuming</oml:description>
					</oml:parameter>
					<oml:parameter>
						<oml:name>steps</oml:name>
						<oml:data_type>list of tuple</oml:data_type>
						<oml:default_value>[{"oml-python:serialized_object": "component_reference", "value": {"key": "simpleimputer", "step_name": "simpleimputer"}}, {"oml-python:serialized_object": "component_reference", "value": {"key": "standardscaler", "step_name": "standardscaler"}}]</oml:default_value>
						<oml:description>List of (name, transform) tuples (implementing `fit`/`transform`) that
    are chained in sequential order. The last transform must be an
    estimator</oml:description>
					</oml:parameter>
					<oml:parameter>
						<oml:name>verbose</oml:name>
						<oml:data_type>bool</oml:data_type>
						<oml:default_value>false</oml:default_value>
						<oml:description>If True, the time elapsed while fitting each step will be printed as it
    is completed.</oml:description>
					</oml:parameter>
					<oml:component>
						<oml:identifier>simpleimputer</oml:identifier>
						<oml:flow xmlns:oml="http://openml.org/openml">
							<oml:name>sklearn.impute._base.SimpleImputer</oml:name>
							<oml:custom_name>sklearn.SimpleImputer</oml:custom_name>
							<oml:class_name>sklearn.impute._base.SimpleImputer</oml:class_name>
							<oml:external_version>openml==0.12.2,sklearn==1.2.0</oml:external_version>
							<oml:description>Univariate imputer for completing missing values with simple strategies.

Replace missing values using a descriptive statistic (e.g. mean, median, or
most frequent) along each column, or using a constant value.</oml:description>
							<oml:language>English</oml:language>
							<oml:dependencies>sklearn==1.2.0
numpy&gt;=1.17.3
scipy&gt;=1.3.2
joblib&gt;=1.1.1
threadpoolctl&gt;=2.0.0</oml:dependencies>
							<oml:parameter>
								<oml:name>add_indicator</oml:name>
								<oml:data_type>bool</oml:data_type>
								<oml:default_value>false</oml:default_value>
								<oml:description>If True, a :class:`MissingIndicator` transform will stack onto output
    of the imputer's transform. This allows a predictive estimator
    to account for missingness despite imputation. If a feature has no
    missing values at fit/train time, the feature won't appear on
    the missing indicator even if there are missing values at
    transform/test time</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>copy</oml:name>
								<oml:data_type>bool</oml:data_type>
								<oml:default_value>true</oml:default_value>
								<oml:description>If True, a copy of X will be created. If False, imputation will
    be done in-place whenever possible. Note that, in the following cases,
    a new copy will always be made, even if `copy=False`:

    - If `X` is not an array of floating values;
    - If `X` is encoded as a CSR matrix;
    - If `add_indicator=True`</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>fill_value</oml:name>
								<oml:data_type>str or numerical value</oml:data_type>
								<oml:default_value>null</oml:default_value>
								<oml:description>When strategy == "constant", fill_value is used to replace all
    occurrences of missing_values
    If left to the default, fill_value will be 0 when imputing numerical
    data and "missing_value" for strings or object data types</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>keep_empty_features</oml:name>
								<oml:data_type>bool</oml:data_type>
								<oml:default_value>false</oml:default_value>
								<oml:description>If True, features that consist exclusively of missing values when
    `fit` is called are returned in results when `transform` is called
    The imputed value is always `0` except when `strategy="constant"`
    in which case `fill_value` will be used instead

    .. versionadded:: 1.2</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>missing_values</oml:name>
								<oml:data_type>int</oml:data_type>
								<oml:default_value>NaN</oml:default_value>
								<oml:description>The placeholder for the missing values. All occurrences of
    `missing_values` will be imputed. For pandas' dataframes with
    nullable integer dtypes with missing values, `missing_values`
    can be set to either `np.nan` or `pd.NA`</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>strategy</oml:name>
								<oml:data_type>str</oml:data_type>
								<oml:default_value>"mean"</oml:default_value>
								<oml:description>The imputation strategy

    - If "mean", then replace missing values using the mean along
      each column. Can only be used with numeric data
    - If "median", then replace missing values using the median along
      each column. Can only be used with numeric data
    - If "most_frequent", then replace missing using the most frequent
      value along each column. Can be used with strings or numeric data
      If there is more than one such value, only the smallest is returned
    - If "constant", then replace missing values with fill_value. Can be
      used with strings or numeric data

    .. versionadded:: 0.20
       strategy="constant" for fixed value imputation</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>verbose</oml:name>
								<oml:data_type>int</oml:data_type>
								<oml:default_value>"deprecated"</oml:default_value>
								<oml:description>Controls the verbosity of the imputer

    .. deprecated:: 1.1
       The 'verbose' parameter was deprecated in version 1.1 and will be
       removed in 1.3. A warning will always be raised upon the removal of
       empty columns in the future version</oml:description>
							</oml:parameter>
							<oml:tag>openml-python</oml:tag>
							<oml:tag>sklearn</oml:tag>
							<oml:tag>scikit-learn</oml:tag>
							<oml:tag>python</oml:tag>
							<oml:tag>sklearn_1.2.0</oml:tag>
						</oml:flow>
					</oml:component>
					<oml:component>
						<oml:identifier>standardscaler</oml:identifier>
						<oml:flow xmlns:oml="http://openml.org/openml">
							<oml:name>sklearn.preprocessing._data.StandardScaler</oml:name>
							<oml:custom_name>sklearn.StandardScaler</oml:custom_name>
							<oml:class_name>sklearn.preprocessing._data.StandardScaler</oml:class_name>
							<oml:external_version>openml==0.12.2,sklearn==1.2.0</oml:external_version>
							<oml:description>Standardize features by removing the mean and scaling to unit variance.

The standard score of a sample `x` is calculated as:

    z = (x - u) / s

where `u` is the mean of the training samples or zero if `with_mean=False`,
and `s` is the standard deviation of the training samples or one if
`with_std=False`.

Centering and scaling happen independently on each feature by computing
the relevant statistics on the samples in the training set. Mean and
standard deviation are then stored to be used on later data using
:meth:`transform`.

Standardization of a dataset is a common requirement for many
machine learning estimators: they might behave badly if the
individual features do not more or less look like standard normally
distributed data (e.g. Gaussian with 0 mean and unit variance).

For instance many elements used in the objective function of
a learning algorithm (such as the RBF kernel of Support Vector
Machines or the L1 and L2 regularizers of linear models) assume that
all features are centered around 0 ...</oml:description>
							<oml:language>English</oml:language>
							<oml:dependencies>sklearn==1.2.0
numpy&gt;=1.17.3
scipy&gt;=1.3.2
joblib&gt;=1.1.1
threadpoolctl&gt;=2.0.0</oml:dependencies>
							<oml:parameter>
								<oml:name>copy</oml:name>
								<oml:data_type>bool</oml:data_type>
								<oml:default_value>true</oml:default_value>
								<oml:description>If False, try to avoid a copy and do inplace scaling instead
    This is not guaranteed to always work inplace; e.g. if the data is
    not a NumPy array or scipy.sparse CSR matrix, a copy may still be
    returned</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>with_mean</oml:name>
								<oml:data_type>bool</oml:data_type>
								<oml:default_value>true</oml:default_value>
								<oml:description>If True, center the data before scaling
    This does not work (and will raise an exception) when attempted on
    sparse matrices, because centering them entails building a dense
    matrix which in common use cases is likely to be too large to fit in
    memory</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>with_std</oml:name>
								<oml:data_type>bool</oml:data_type>
								<oml:default_value>true</oml:default_value>
								<oml:description>If True, scale the data to unit variance (or equivalently,
    unit standard deviation).</oml:description>
							</oml:parameter>
							<oml:tag>openml-python</oml:tag>
							<oml:tag>sklearn</oml:tag>
							<oml:tag>scikit-learn</oml:tag>
							<oml:tag>python</oml:tag>
							<oml:tag>sklearn_1.2.0</oml:tag>
						</oml:flow>
					</oml:component>
					<oml:tag>openml-python</oml:tag>
					<oml:tag>sklearn</oml:tag>
					<oml:tag>scikit-learn</oml:tag>
					<oml:tag>python</oml:tag>
					<oml:tag>sklearn_1.2.0</oml:tag>
				</oml:flow>
			</oml:component>
			<oml:component>
				<oml:identifier>nominal</oml:identifier>
				<oml:flow xmlns:oml="http://openml.org/openml">
					<oml:name>sklearn.pipeline.Pipeline(onehotencoder=sklearn.preprocessing._encoders.OneHotEncoder)</oml:name>
					<oml:custom_name>sklearn.Pipeline(OneHotEncoder)</oml:custom_name>
					<oml:class_name>sklearn.pipeline.Pipeline</oml:class_name>
					<oml:external_version>openml==0.12.2,sklearn==1.2.0</oml:external_version>
					<oml:description>Pipeline of transforms with a final estimator.

Sequentially apply a list of transforms and a final estimator.
Intermediate steps of the pipeline must be 'transforms', that is, they
must implement `fit` and `transform` methods.
The final estimator only needs to implement `fit`.
The transformers in the pipeline can be cached using ``memory`` argument.

The purpose of the pipeline is to assemble several steps that can be
cross-validated together while setting different parameters. For this, it
enables setting parameters of the various steps using their names and the
parameter name separated by a `'__'`, as in the example below. A step's
estimator may be replaced entirely by setting the parameter with its name
to another estimator, or a transformer removed by setting it to
`'passthrough'` or `None`.</oml:description>
					<oml:language>English</oml:language>
					<oml:dependencies>sklearn==1.2.0
numpy&gt;=1.17.3
scipy&gt;=1.3.2
joblib&gt;=1.1.1
threadpoolctl&gt;=2.0.0</oml:dependencies>
					<oml:parameter>
						<oml:name>memory</oml:name>
						<oml:data_type>str or object with the joblib</oml:data_type>
						<oml:default_value>null</oml:default_value>
						<oml:description>Used to cache the fitted transformers of the pipeline. By default,
    no caching is performed. If a string is given, it is the path to
    the caching directory. Enabling caching triggers a clone of
    the transformers before fitting. Therefore, the transformer
    instance given to the pipeline cannot be inspected
    directly. Use the attribute ``named_steps`` or ``steps`` to
    inspect estimators within the pipeline. Caching the
    transformers is advantageous when fitting is time consuming</oml:description>
					</oml:parameter>
					<oml:parameter>
						<oml:name>steps</oml:name>
						<oml:data_type>list of tuple</oml:data_type>
						<oml:default_value>[{"oml-python:serialized_object": "component_reference", "value": {"key": "onehotencoder", "step_name": "onehotencoder"}}]</oml:default_value>
						<oml:description>List of (name, transform) tuples (implementing `fit`/`transform`) that
    are chained in sequential order. The last transform must be an
    estimator</oml:description>
					</oml:parameter>
					<oml:parameter>
						<oml:name>verbose</oml:name>
						<oml:data_type>bool</oml:data_type>
						<oml:default_value>false</oml:default_value>
						<oml:description>If True, the time elapsed while fitting each step will be printed as it
    is completed.</oml:description>
					</oml:parameter>
					<oml:component>
						<oml:identifier>onehotencoder</oml:identifier>
						<oml:flow xmlns:oml="http://openml.org/openml">
							<oml:name>sklearn.preprocessing._encoders.OneHotEncoder</oml:name>
							<oml:custom_name>sklearn.OneHotEncoder</oml:custom_name>
							<oml:class_name>sklearn.preprocessing._encoders.OneHotEncoder</oml:class_name>
							<oml:external_version>openml==0.12.2,sklearn==1.2.0</oml:external_version>
							<oml:description>Encode categorical features as a one-hot numeric array.

The input to this transformer should be an array-like of integers or
strings, denoting the values taken on by categorical (discrete) features.
The features are encoded using a one-hot (aka 'one-of-K' or 'dummy')
encoding scheme. This creates a binary column for each category and
returns a sparse matrix or dense array (depending on the ``sparse_output``
parameter)

By default, the encoder derives the categories based on the unique values
in each feature. Alternatively, you can also specify the `categories`
manually.

This encoding is needed for feeding categorical data to many scikit-learn
estimators, notably linear models and SVMs with the standard kernels.

Note: a one-hot encoding of y labels should use a LabelBinarizer
instead.</oml:description>
							<oml:language>English</oml:language>
							<oml:dependencies>sklearn==1.2.0
numpy&gt;=1.17.3
scipy&gt;=1.3.2
joblib&gt;=1.1.1
threadpoolctl&gt;=2.0.0</oml:dependencies>
							<oml:parameter>
								<oml:name>categories</oml:name>
								<oml:data_type>'auto' or a list of array</oml:data_type>
								<oml:default_value>"auto"</oml:default_value>
								<oml:description>Categories (unique values) per feature:

    - 'auto' : Determine categories automatically from the training data
    - list : ``categories[i]`` holds the categories expected in the ith
      column. The passed categories should not mix strings and numeric
      values within a single feature, and should be sorted in case of
      numeric values

    The used categories can be found in the ``categories_`` attribute

    .. versionadded:: 0.20

drop : {'first', 'if_binary'} or an array-like of shape (n_features,),             default=None
    Specifies a methodology to use to drop one of the categories per
    feature. This is useful in situations where perfectly collinear
    features cause problems, such as when feeding the resulting data
    into an unregularized linear regression model

    However, dropping one category breaks the symmetry of the original
    representation and can therefore induce a bias in downstream models,
    for instance for penalized linear classification or regression models</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>drop</oml:name>
								<oml:default_value>null</oml:default_value>
							</oml:parameter>
							<oml:parameter>
								<oml:name>dtype</oml:name>
								<oml:data_type>number type</oml:data_type>
								<oml:default_value>{"oml-python:serialized_object": "type", "value": "np.float64"}</oml:default_value>
								<oml:description>Desired dtype of output

handle_unknown : {'error', 'ignore', 'infrequent_if_exist'},                      default='error'
    Specifies the way unknown categories are handled during :meth:`transform`

    - 'error' : Raise an error if an unknown category is present during transform
    - 'ignore' : When an unknown category is encountered during
      transform, the resulting one-hot encoded columns for this feature
      will be all zeros. In the inverse transform, an unknown category
      will be denoted as None
    - 'infrequent_if_exist' : When an unknown category is encountered
      during transform, the resulting one-hot encoded columns for this
      feature will map to the infrequent category if it exists. The
      infrequent category will be mapped to the last position in the
      encoding. During inverse transform, an unknown category will be
      mapped to the category denoted `'infrequent'` if it exists. If the
      `'infrequent'` category does not exist, then :meth:`transform` and
      ...</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>handle_unknown</oml:name>
								<oml:default_value>"ignore"</oml:default_value>
							</oml:parameter>
							<oml:parameter>
								<oml:name>max_categories</oml:name>
								<oml:data_type>int</oml:data_type>
								<oml:default_value>null</oml:default_value>
								<oml:description>Specifies an upper limit to the number of output features for each input
    feature when considering infrequent categories. If there are infrequent
    categories, `max_categories` includes the category representing the
    infrequent categories along with the frequent categories. If `None`,
    there is no limit to the number of output features

    .. versionadded:: 1.1
        Read more in the :ref:`User Guide &lt;one_hot_encoder_infrequent_categories&gt;`.</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>min_frequency</oml:name>
								<oml:data_type>int or float</oml:data_type>
								<oml:default_value>null</oml:default_value>
								<oml:description>Specifies the minimum frequency below which a category will be
    considered infrequent

    - If `int`, categories with a smaller cardinality will be considered
      infrequent

    - If `float`, categories with a smaller cardinality than
      `min_frequency * n_samples`  will be considered infrequent

    .. versionadded:: 1.1
        Read more in the :ref:`User Guide &lt;one_hot_encoder_infrequent_categories&gt;`</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>sparse</oml:name>
								<oml:data_type>bool</oml:data_type>
								<oml:default_value>"deprecated"</oml:default_value>
								<oml:description>Will return sparse matrix if set True else will return an array

    .. deprecated:: 1.2
       `sparse` is deprecated in 1.2 and will be removed in 1.4. Use
       `sparse_output` instead</oml:description>
							</oml:parameter>
							<oml:parameter>
								<oml:name>sparse_output</oml:name>
								<oml:data_type>bool</oml:data_type>
								<oml:default_value>true</oml:default_value>
								<oml:description>Will return sparse matrix if set True else will return an array

    .. versionadded:: 1.2
       `sparse` was renamed to `sparse_output`</oml:description>
							</oml:parameter>
							<oml:tag>openml-python</oml:tag>
							<oml:tag>sklearn</oml:tag>
							<oml:tag>scikit-learn</oml:tag>
							<oml:tag>python</oml:tag>
							<oml:tag>sklearn_1.2.0</oml:tag>
						</oml:flow>
					</oml:component>
					<oml:tag>openml-python</oml:tag>
					<oml:tag>sklearn</oml:tag>
					<oml:tag>scikit-learn</oml:tag>
					<oml:tag>python</oml:tag>
					<oml:tag>sklearn_1.2.0</oml:tag>
				</oml:flow>
			</oml:component>
			<oml:tag>openml-python</oml:tag>
			<oml:tag>sklearn</oml:tag>
			<oml:tag>scikit-learn</oml:tag>
			<oml:tag>python</oml:tag>
			<oml:tag>sklearn_1.2.0</oml:tag>
		</oml:flow>
	</oml:component>
	<oml:component>
		<oml:identifier>decisiontreeregressor</oml:identifier>
		<oml:flow xmlns:oml="http://openml.org/openml">
			<oml:name>sklearn.tree._classes.DecisionTreeRegressor</oml:name>
			<oml:custom_name>sklearn.DecisionTreeRegressor</oml:custom_name>
			<oml:class_name>sklearn.tree._classes.DecisionTreeRegressor</oml:class_name>
			<oml:external_version>openml==0.12.2,sklearn==1.2.0</oml:external_version>
			<oml:description>A decision tree regressor.</oml:description>
			<oml:language>English</oml:language>
			<oml:dependencies>sklearn==1.2.0
numpy&gt;=1.17.3
scipy&gt;=1.3.2
joblib&gt;=1.1.1
threadpoolctl&gt;=2.0.0</oml:dependencies>
			<oml:parameter>
				<oml:name>ccp_alpha</oml:name>
				<oml:data_type>non</oml:data_type>
				<oml:default_value>0.0</oml:default_value>
				<oml:description>Complexity parameter used for Minimal Cost-Complexity Pruning. The
    subtree with the largest cost complexity that is smaller than
    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See
    :ref:`minimal_cost_complexity_pruning` for details

    .. versionadded:: 0.22</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>criterion</oml:name>
				<oml:default_value>"friedman_mse"</oml:default_value>
			</oml:parameter>
			<oml:parameter>
				<oml:name>max_depth</oml:name>
				<oml:data_type>int</oml:data_type>
				<oml:default_value>null</oml:default_value>
				<oml:description>The maximum depth of the tree. If None, then nodes are expanded until
    all leaves are pure or until all leaves contain less than
    min_samples_split samples</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>max_features</oml:name>
				<oml:data_type>int</oml:data_type>
				<oml:default_value>1.0</oml:default_value>
				<oml:description>The number of features to consider when looking for the best split:

    - If int, then consider `max_features` features at each split
    - If float, then `max_features` is a fraction and
      `max(1, int(max_features * n_features_in_))` features are considered at each
      split
    - If "auto", then `max_features=n_features`
    - If "sqrt", then `max_features=sqrt(n_features)`
    - If "log2", then `max_features=log2(n_features)`
    - If None, then `max_features=n_features`

    .. deprecated:: 1.1
        The `"auto"` option was deprecated in 1.1 and will be removed
        in 1.3

    Note: the search for a split does not stop until at least one
    valid partition of the node samples is found, even if it requires to
    effectively inspect more than ``max_features`` features</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>max_leaf_nodes</oml:name>
				<oml:data_type>int</oml:data_type>
				<oml:default_value>null</oml:default_value>
				<oml:description>Grow a tree with ``max_leaf_nodes`` in best-first fashion
    Best nodes are defined as relative reduction in impurity
    If None then unlimited number of leaf nodes</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>min_impurity_decrease</oml:name>
				<oml:data_type>float</oml:data_type>
				<oml:default_value>0.0</oml:default_value>
				<oml:description>A node will be split if this split induces a decrease of the impurity
    greater than or equal to this value

    The weighted impurity decrease equation is the following::

        N_t / N * (impurity - N_t_R / N_t * right_impurity
                            - N_t_L / N_t * left_impurity)

    where ``N`` is the total number of samples, ``N_t`` is the number of
    samples at the current node, ``N_t_L`` is the number of samples in the
    left child, and ``N_t_R`` is the number of samples in the right child

    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,
    if ``sample_weight`` is passed

    .. versionadded:: 0.19</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>min_samples_leaf</oml:name>
				<oml:data_type>int or float</oml:data_type>
				<oml:default_value>16</oml:default_value>
				<oml:description>The minimum number of samples required to be at a leaf node
    A split point at any depth will only be considered if it leaves at
    least ``min_samples_leaf`` training samples in each of the left and
    right branches.  This may have the effect of smoothing the model,
    especially in regression

    - If int, then consider `min_samples_leaf` as the minimum number
    - If float, then `min_samples_leaf` is a fraction and
      `ceil(min_samples_leaf * n_samples)` are the minimum
      number of samples for each node

    .. versionchanged:: 0.18
       Added float values for fractions</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>min_samples_split</oml:name>
				<oml:data_type>int or float</oml:data_type>
				<oml:default_value>3</oml:default_value>
				<oml:description>The minimum number of samples required to split an internal node:

    - If int, then consider `min_samples_split` as the minimum number
    - If float, then `min_samples_split` is a fraction and
      `ceil(min_samples_split * n_samples)` are the minimum
      number of samples for each split

    .. versionchanged:: 0.18
       Added float values for fractions</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>min_weight_fraction_leaf</oml:name>
				<oml:data_type>float</oml:data_type>
				<oml:default_value>0.0</oml:default_value>
				<oml:description>The minimum weighted fraction of the sum total of weights (of all
    the input samples) required to be at a leaf node. Samples have
    equal weight when sample_weight is not provided</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>random_state</oml:name>
				<oml:data_type>int</oml:data_type>
				<oml:default_value>null</oml:default_value>
				<oml:description>Controls the randomness of the estimator. The features are always
    randomly permuted at each split, even if ``splitter`` is set to
    ``"best"``. When ``max_features &lt; n_features``, the algorithm will
    select ``max_features`` at random at each split before finding the best
    split among them. But the best found split may vary across different
    runs, even if ``max_features=n_features``. That is the case, if the
    improvement of the criterion is identical for several splits and one
    split has to be selected at random. To obtain a deterministic behaviour
    during fitting, ``random_state`` has to be fixed to an integer
    See :term:`Glossary &lt;random_state&gt;` for details</oml:description>
			</oml:parameter>
			<oml:parameter>
				<oml:name>splitter</oml:name>
				<oml:default_value>"best"</oml:default_value>
			</oml:parameter>
			<oml:tag>openml-python</oml:tag>
			<oml:tag>sklearn</oml:tag>
			<oml:tag>scikit-learn</oml:tag>
			<oml:tag>python</oml:tag>
			<oml:tag>sklearn_1.2.0</oml:tag>
		</oml:flow>
	</oml:component>
	<oml:tag>openml-python</oml:tag>
	<oml:tag>sklearn</oml:tag>
	<oml:tag>scikit-learn</oml:tag>
	<oml:tag>python</oml:tag>
	<oml:tag>sklearn_1.2.0</oml:tag>
</oml:flow>